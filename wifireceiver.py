from distutils.command.build import build
import numpy as np
import sys
import commpy as comm
import commpy.channelcoding.convcode as check
import time
import viterbi
import build_error_array as berror

''''
The trellis arrray is made of 2 rows and 4 cols.
    - The rows indicate the input being 0 or 1.
    - The cols refer to the current states.
    - The elements of the array represent the output given current state and current input
'''
trellis_array = np.array([[0, 3, 2, 1], [3, 0, 1, 2]]) #easier to use in my opinion than cc1

#some testing arrays
hello_array = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
count9_array = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
abcde_array = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

mod = comm.modulation.QAMModem(4)
level2_array = np.array([1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
level2_array = mod.modulate(level2_array.astype(bool))

level3_array = np.array([(0.25+0j), 0j, (-0.33187577644799227+0.32196063415130016j), 0j, (-0.06764951251827461-0.08110583720536446j), 0j, (-0.08203470746227205+0.08916462385396362j), 0j, (0.36427669529663687+0.025888347648318447j), 0j, (0.14294013183550203+0.0671846434307013j), 0j, (0.11548494156391084+0.24048494156391084j), 0j, (-0.08435293561000833-0.17127447748538727j), 0j, (-0.25+0.125j), 0j, (0.06933593221939491+0.01712250657049455j), 0j, (0.16332037060954704+0.4077465784244586j), 0j, (-0.08899768449492096+0.26811154107370216j), 0j, (0.27588834764831843-0.0625j), 0j, (-0.08100805313899251+0.15399551465684047j), 0j, (0.04783542904563623+0.17283542904563623j), 0j, (-0.040592813148470894-0.08499537785553092j), 0j, (0.125-0.375j), 0j, (-0.0009387790152376729+0.05474808410656537j), 0j, (0.06764951251827461-0.2724475533879093j), 0j, (-0.16967401079559347-0.270066529943014j), 0j, (0.010723304703363107-0.15088834764831843j), 0j, (0.2855452817190004+0.03707652143925488j), 0j, (-0.11548494156391084+0.009515058436089158j), 0j, (0.24039079577660138+0.17986478426407104j), 0j, (0.125+0j), 0j, (-0.2668514626460756+0.03294547046827681j), 0j, (-0.16332037060954704-0.05419318783118479j), 0j, (0.1639297074561496+0.339567060311985j), 0j, (0.09911165235168155-0.0625j), 0j, (0.1828527254744008-0.18503337482343352j), 0j, (-0.04783542904563623+0.07716457095436377j), 0j, (0.061331648278514714+0.14962837578021027j), 0j, (-1-0.9375j), (0.009159608198302777+0.061749062721107105j), (0.018055429824413063+0.05952077540357866j), (0.026432965946064518+0.05588781087608606j), (0.034055944173488666+0.050968322303057326j), (0.04071457341026696+0.04492160929274867j), (0.04623280517284028+0.03794228264586359j), (0.05047433014271487+0.03025314923058954j), (0.05334708691207961+0.02209708691207961j), (0.05480611668018648+0.013728217567109917j), (0.054854660775432246+0.005402712520453516j), (0.053543464895340634-0.0026304217560501435j), (0.050968322303057326-0.010138229650670556j), (0.0472659552734941-0.01691202922025259j), (0.04260839727401001-0.0227746628279737j), (0.03719609527151017-0.027586504377302184j), (0.03125-0.03125j), (0.025002950145502148-0.03371257564789972j), (0.018690682751191894-0.03496780795398172j), (0.012542815709768958-0.03505482154865649j), (0.006774148478898099-0.034055944173488666j), (0.0015766141264315567-0.032092717807675j), (-0.0028878100065231754-0.029320427043271625j), (-0.006492963345015423-0.025921362693117934j), (-0.009152913087920388-0.02209708691207961j), (-0.010824749882487026-0.01806000410458152j), (-0.011509665609115139-0.014024568123045483j), (-0.011252277358642114-0.010198469729023527j), (-0.010138229650670556-0.006774148478898099j), (-0.008290173617660622-0.003920960107176991j), (-0.005862284698405047-0.0017783046216232404j), (-0.003033536927705244-0.00044998269590520307j), 0j, (0.003033536927705239-0.00044998269590520307j), (0.005862284698405048-0.0017783046216232404j), (0.008290173617660618-0.003920960107176987j), (0.010138229650670556-0.006774148478898099j), (0.01125227735864211-0.010198469729023524j), (0.011509665609115143-0.01402456812304548j), (0.01082474988248703-0.018060004104581515j), (0.009152913087920388-0.02209708691207961j), (0.00649296334501542-0.025921362693117934j), (0.002887810006523172-0.029320427043271625j), (-0.0015766141264315567-0.03209271780767499j), (-0.006774148478898099-0.034055944173488666j), (-0.012542815709768958-0.03505482154865649j), (-0.018690682751191894-0.03496780795398172j), (-0.02500295014550214-0.033712575647899715j), (-0.03125-0.03125j), (-0.03719609527151016-0.02758650437730218j), (-0.04260839727401001-0.022774662827973705j), (-0.047265955273494094-0.01691202922025259j), (-0.050968322303057326-0.010138229650670556j), (-0.053543464895340634-0.0026304217560501435j), (-0.054854660775432246+0.005402712520453512j), (-0.05480611668018648+0.01372821756710991j), (-0.05334708691207961+0.02209708691207961j), (-0.05047433014271488+0.03025314923058954j), (-0.046232805172840286+0.03794228264586359j), (-0.04071457341026696+0.04492160929274866j), (-0.034055944173488666+0.050968322303057326j), (-0.02643296594606452+0.05588781087608607j), (-0.018055429824413063+0.05952077540357866j), (-0.009159608198302778+0.061749062721107105j), (-0.46875-0.75j), (-0.01799786517923877-0.004740837509918324j), (0.03381846130305234+0.4625031105555508j), (-0.01983334053244712+0.008819257224307115j), (-0.13005375134869354+0.15429841495544408j), (-0.018999661271119423+0.002594844625512044j), (-0.046880697070410635+0.0949449252402884j), (-0.012584297215230494+0.03479361617924495j), (-0.07923543456039807+0.009152913087920388j), (-0.06694591053466575+0.05215144735884413j), (0.0958697975573626-0.04406933865741572j), (-0.0870688213204356+0.00971160651903331j), (0.10474258877960331+0.15290496690917196j), (-0.07674127637970078+0.02360485795091118j), (-0.05229006437641902+0.0951431300406856j), (-0.1542116647220525+0.02237200969768146j), (0.0625+0.03125j), (-0.17937215008761448-0.10129406804227616j), (0.015789255717245557+0.17641216176651175j), (-0.0662790511406851-0.1613957352661936j), (-0.11267899739042217+0.045356433956079995j), (-0.005236674533080559-0.10781051131848199j), (0.06380488393229611-0.0107963264340709j), (0.009524003069796075-0.08929527468472498j), (0.02745873926376116+0.1859296083845573j), (0.05047997596027906-0.02581527123877199j), (-0.1625389680050389+0.10088178366053316j), (-0.041778215828182017+0.06286261897715918j), (-0.10249478160439843-0.030414688952011673j), (-0.15625844099208003-0.046289398937331194j), (-0.0830040787343051-0.03434583213658768j), (-0.041810753336012-0.16230224332080181j), (-0.03125-0.125j), (0.04574446475511947-0.05224002068170783j), (0.09679342704392498-0.05758152438552533j), (-0.0637234581206558-0.020846363291327486j), (0.023359577524534325+0.014895758868715137j), (-0.033965419541531205-0.14436268978976832j), (0.05527948150993223-0.06951895342067264j), (0.10670990345582815-0.0771559618820451j), (0.14173543456039805+0.05334708691207961j), (0.032751524985429215+0.057255337521810105j), (-0.019821500599566402+0.11562202126480217j), (-0.059728828871681336-0.011608219867362702j), (-0.03466006730712563-0.020322445436694286j), (0.011848936239183525-0.04274518250442451j), (0.019581582113849236+0.01922553752665772j), (-0.01008617487992089+0.03792884028377889j), (-0.0625-0.03125j), (-0.08885939105217706-0.01456050281173392j), (0.06698720358409556-0.1179454002882188j), (-0.02299957925184822-0.06706210023069688j), (0.09437317121458139+0.03544939221976079j), (-0.01896281560863258+0.009093414918827418j), (-0.03559201602013615-0.05124129773722641j), (-0.11316466774648289-0.041177808658111104j), (0.16004126073623884-0.1234296083845573j), (-0.02580064884713168-0.16075608459624602j), (0.12310232339892425+0.11417718608376196j), (0.11141129506593518-0.07048106406491896j), (-0.09258773986807925-0.102167832520466j), (0.048315352086961055+0.05591466505475537j), (0.3291009086451933-0.2934111830790741j), (-0.03437634862592545+0.024836822384977697j), (-0.625-0.75j), (0.01826762287869732-0.048063888768691485j), (-0.061477540919225235+0.27274066920798146j), (0.14183348654098477-0.035354886082719736j), (0.0023787646090222894+0.006346968914431721j), (0.12541318773308258+0.09578255557015602j), (0.06680087906604978+0.1806156613451418j), (0.03138497316572289+0.0643368349155334j), (-0.1859296083845573+0.08459708691207961j), (0.10755720200166942+0.026489316093960606j), (-0.0005680673739138879-0.1700885928851965j), (0.10644228721577562+0.16248475658568645j), (0.178970258126661+0.03877827712729691j), (-0.06743651570432574+0.14992682982798405j), (-0.006099997053335339+0.10387291384432608j), (-0.04950576813671578-0.01867773385571183j), (0.03125-0.03125j), (0.08429774495699466+0.020690906113600093j), (0.10889560773006234+0.05441644716876029j), (0.011196212166675417+0.11826339625387791j), (0.04320885726140906+0.0778229384331815j), (-0.062270652172718086+0.020893740621744657j), (0.06338923858994666+0.07544922215080886j), (0.03430564461755688-0.035968130215308466j), (0.009152913087920388+0.11048543456039807j), (0.07386793354069174+0.03370662196718875j), (0.01530260402633862+0.0417869880171565j), (0.050660007340967664+0.05003886426233601j), (0.0637624906124547+0.151361513348138j), (0.06856007771358238+0.08035638135606908j), (-0.16896785170028986+0.1779466036486989j), (-0.0006281448443491225+0.14274952652807094j), (-0.1875-0.125j), (-0.10020008399328696+0.06940246304068944j), (0.08651152943861092-0.1322217391246849j), (-0.05414526616460899-0.0333798098504456j), (0.06012123539097771+0.030264683437249834j), (0.010110461688929415-0.01753280120090151j), (0.03316513241456453-0.04009673126184525j), (0.0021675072835983106-0.008510838233167575j), (0.1234296083845573+0.04040291308792039j), (0.029928979985469936-0.02676159190377671j), (-0.014950862709382642+0.10673423375626377j), (0.053467652458252406+0.006863649095462845j), (-0.02808191047834256-0.03877827712729691j), (0.0325265760302977+0.019421575853165243j), (0.07896941461835724-0.003906902363711759j), (0.03701958614957643+0.018405458045895724j), (0.03125+0.03125j), (0.007149774593684148+0.03513509056876574j), (0.07945875139887042+0.018452970396261616j), (-0.021719861588687422-0.04001364188462342j), (0.019291142738590943+0.13556540921513693j), (0.09958243179634231-0.08962843655491001j), (-0.1267435977188794-0.0025798045857869656j), (0.17262681649703276+0.05730670448730642j), (0.05334708691207961-0.11048543456039807j), (0.029130826036079745+0.13940108288826358j), (0.03682797840863947+0.05817902346345782j), (-0.03773451796935946+0.021097671620425522j), (-0.08965083826077316-0.151361513348138j), (0.04351443291480943-0.00921984547330755j), (0.30948678178358635-0.24130096277763163j), (0.022629385267577636+0.0303581783273814j)])
            
def WifiReceiver(*args):
    output = args[0]
    level = int(args[1])
    length = 0
    message = ""
    begin_zero_padding = 0      
    nfft = 64
    cc1 = check.Trellis(np.array([3]),np.array([[0o7,0o5]]))
    preamble = np.array([1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1,1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1])
    '''TODO: DELETE THE OUTPUT = PART! ITS JUST FOR TESTING NOW'''
    output = level3_array
    '''DELETE THE OUTPUT = PART! ITS JUST FOR TESTING NOW'''


    #TODO: CHANGE ELIFS TO IF STATEMENTS

    #Preamble Detection
    if level >= 4:
        '''snr input will be >= 30dB'''

        '''First, find the preamble pattern'''
        n_preamble = len(preamble)
        n_output = len(output)
        i_preamble = 0
        i_output = 0
        #while i_output < n_output - n_preamble:


    #OFDM Demod
    elif level >= 3:
        nsym = int(len(output)/nfft)
        for i in range(nsym):
            symbol = output[i*nfft:(i+1)*nfft]
            output[i*nfft:(i+1)*nfft] = np.fft.fft(symbol)
    
    #Turbo Decoding
    elif level >= 2:

        '''Convert complex to bits'''
        mod = comm.modulation.QAMModem(4)
        output = mod.demodulate(output, "hard")
        #TODO: REMOVE THE OUTPUT = [X, X, ...] LINE
        output = np.array([1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1])
        n_output = len(output)
        generator_bits = []
        l, r = 0, 1

        while r < n_output:
            i = output[l]
            generator_bits.append([output[l], output[r]])
            l += 2
            r += 2
        
        error_array = berror.build_error_array(generator_bits)
        #print("error_array: \n", error_array, "\n")
        output_ref = check.viterbi_decode(output, cc1)
        print("viterbi solver should return : ", output_ref, "\n")
        output = viterbi.viterbi_solver(error_array)

    #De-interleaving
    elif level >= 1:
        '''
        Intially the bits are going to be padding of 0s.
        len_binary :128 bits
            first last 14 bits of len_binary represent the length of the message
            bits: [113, 127]
        '''
        Interleave = np.reshape(np.transpose(np.reshape(np.arange(1, 2*nfft+1, 1),[-1,4])),[-1,])
        start_length_bit = 113
        n = len(output)
        n_row = 128
        bits = np.zeros(n - 128)

        'get length of message'
        for i in range(start_length_bit, n_row):
            bit = output[i]
            if bit == 1:
                binary_index = n_row - (i + 1)
                length += 2**(binary_index)
    
        'get the message'
        encoded_message = output[n_row:]
        n_encoded = len(encoded_message)
        n_interleave = len(Interleave)

        for row in range(0, n_encoded, n_row):
            output_row = encoded_message[row:row+n_row]
            for i in range(n_interleave):
                col = (Interleave - 1)[i]
                bits[n_row*row + col] = output_row[row*n_row + i]


        'decode the message'
        n_bits = len(bits)
        bits_per_num = 8
        ascii_values = np.zeros((n_bits//bits_per_num,), dtype = int)

        #build the ASCII values of each number
        for start in range(0, n_bits, bits_per_num):
            num = 0
            for i in range(bits_per_num):
                bit = bits[start + i]
                if (bit == 1):
                    exp =  (bits_per_num - 1) - (i % bits_per_num)
                    num += int(2**(exp))

            ascii_values[start//bits_per_num] = num

        #convert the ASCII values to letters
        for num in ascii_values:
            message += chr(num)

    print(message + ",", length)
    
    return begin_zero_padding, message, length

if __name__ == '__main__':
    start_time = time.time()
    WifiReceiver(sys.argv[1], sys.argv[2])